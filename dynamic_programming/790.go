/*
790. 多米诺和托米诺平铺.
有两种形状的瓷砖：一种是 2 x 1 的多米诺形，另一种是形如 "L" 的托米诺形。两种形状都可以旋转。
给定整数 n ，返回可以平铺 2 x n 的面板的方法的数量。返回对 109 + 7 取模 的值。

平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。

示例 1:
输入: n = 3
输出: 5
解释: 五种不同的方法如上所示。

示例 2:
输入: n = 1
输出: 1
提示：

1 <= n <= 1000
*/
package main

import "fmt"

func numTilings(n int) int {
	dp := make([]int, n+1)
	const mod = 1_000_000_007
	dp[0] = 1
	dp[1] = 1
	if n >= 2 {
		dp[2] = 2
	}
	var sum int
	for i := 3; i <= n; i++ {
		sum += (2 * dp[i-3]) % mod
		dp[i] = (dp[i-1] + dp[i-2] + sum) % mod
	}
	return dp[n]
}

// FIXME：更好理解的版本
func numTilings1(n int) int {
	/*
		FIXME：dp[i][j]：i表示平铺到第i列，第i列前面的都已经平铺完毕，第i列之后的列都没开始平铺
		FIXME：j有四种状态，
		FIXME：0表示第i列上下正方形都没有被覆盖，
		FIXME：1表示第i列上方正方形被覆盖，
		FIXME：2表示第i列下方正方形被覆盖，
		FIXME：3表示上下两个正方形都被覆盖
	*/
	const mod = 1_000_000_007
	dp := make([][4]int, n+1)
	dp[0][3] = 1
	for i := 1; i <= n; i++ {
		// 第i列上下正方形未平铺，取第i-1列完全平铺的情况即可，即dp[i-1][3]
		dp[i][0] = dp[i-1][3]

		// 第i列只铺了上方正方形，
		// dp[i-1][0]表示在第i-1列没有平铺的情况下铺上 ┏ ，
		// dp[i-1][2]表示在第i-1列只铺了下方正方形的情况下铺上 --
		dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % mod

		// 第i列只铺了下方正方形，
		// dp[i-1][0]表示在第i-1列没有平铺的情况下铺上 L ，
		// dp[i-1][1]表示在第i-1列只铺了上方正方形的情况下铺上 --
		dp[i][2] = (dp[i-1][0] + dp[i-1][1]) % mod

		// 第i列两个正方形均被平铺，
		// dp[i-1][0]表示在第i-1列没有平铺的情况下铺上 二 ，即两个 -- 叠在一起
		// dp[i-1][1]表示在第i-1列只铺了上方正方形的情况下铺上 ┛
		// dp[i-1][2]表示在第i-1列只铺了下方正方形的情况下铺上 ┓
		// dp[i-1][3]表示在第i-1列铺满的情况下铺上 |
		dp[i][3] = (((dp[i-1][0]+dp[i-1][1])%mod+dp[i-1][2]%mod)%mod + dp[i-1][3]) % mod // dp[i-1][0]表示，dp[i-1][1]表示，，
	}
	return dp[n][3]
}
func main() {
	var n int
	fmt.Println("Input n")
	fmt.Scan(&n)
	fmt.Println(numTilings(n))
}
